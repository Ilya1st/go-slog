// Package slog is a fork of the standard go log and syslog package. It is a
// drop in replacement for the default log package, however it does not
// instantiate a standard logger.
// Setup and use a standard logger by defining a global:
// var log = logger.New(os.Stderr, "", LstdFlags, LOG_INFO)
// and use it as usual
// log.Error("something went wrong")
package slog

import (
	"fmt"
	"io"
	"os"
	"runtime"
	"sync"
	"time"
)

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The tag is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//	2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message

	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	Llevel                        // if log level is printed out e.g. ERROR
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

const (
	tdefault = iota
	tsyslog
	tfile
)

// The Priority is a combination of the syslog facility and
// severity. For example, LOG_ALERT | LOG_FTP sends an alert severity
// message from the FTP facility. The default severity is LOG_EMERG;
// the default facility is LOG_KERN.
type Priority int

// Priorities from /usr/include/sys/syslog.h.
// These are the same on Linux, BSD, and OS X.
const (
	LOG_EMERG   = iota // system is unusable
	LOG_ALERT          // action must be taken immediately
	LOG_CRIT           // critical conditions
	LOG_ERR            // error conditions
	LOG_WARNING        // warning conditions
	LOG_NOTICE         // normal but significant condition
	LOG_INFO           // informational
	LOG_DEBUG          // debug-level messages
)

var levelNames = []string{
	"EMERG",
	"ALERT",
	"CRITCAL",
	"ERROR",
	"WARNING",
	"NOTICE",
	"INFO",
	"DEBUG",
}

// A Logger represents an active logging object that generates lines of
// output to an io.Writer.  Each logging operation makes a single call to
// the Writer's Write method.  A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	sync.Mutex // ensures atomic writes; protects the following fields

	logType int       // one of tdefault, tsyslog, tfile
	tag     string    // prefix to write at beginning of each line or syslog tag
	flag    int       // properties
	out     io.Writer // destination for output
	buf     []byte    // for accumulating text to write
	level   Priority  // enabled log level

	DefaultLogLevel Priority // default log level for Print[f|ln]
	FatalLogLevel   Priority // default log level for Fatal[f|ln]
	PanicLogLevel   Priority // default log level for Panic[f|ln]

	// syslog
	hostname string
	network  string
	raddr    string
	conn     serverConn
	facility Priority

	// file
	file *os.File
}

// New creates a new Logger. The out variable sets the
// destination to which log data will be written.
// The prefix tag appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func New(out io.Writer, tag string, flag int) *Logger {
	return &Logger{
		out:     out,
		tag:     tag,
		flag:    flag,
		level:   LOG_INFO,
		logType: tdefault,

		DefaultLogLevel: LOG_INFO,
		FatalLogLevel:   LOG_CRIT,
		PanicLogLevel:   LOG_ALERT,
	}
}

// Close closes a connection to the syslog daemon.
func (l *Logger) Close() error {
	l.Lock()
	defer l.Unlock()

	switch l.logType {
	case tdefault:
	case tsyslog:
		if l.conn != nil {
			err := l.conn.close()
			l.conn = nil
			return err
		}
	case tfile:
		l.file.Close()
	}
	return nil
}

// SetOutput sets the output destination for the logger.
func (l *Logger) SetOutput(w io.Writer) {
	l.Lock()
	defer l.Unlock()
	l.out = w
}

// SetLogLevel sets the log level for the logger.
func (l *Logger) SetLogLevel(level Priority) {
	l.Lock()
	defer l.Unlock()
	l.level = level
}

// Flags returns the output flags for the logger.
func (l *Logger) Flags() int {
	l.Lock()
	defer l.Unlock()
	return l.flag
}

// SetFlags sets the output flags for the logger.
func (l *Logger) SetFlags(flag int) {
	l.Lock()
	defer l.Unlock()
	l.flag = flag
}

// Prefix returns the output tag for the logger.
func (l *Logger) Prefix() string {
	l.Lock()
	defer l.Unlock()
	return l.tag
}

// SetPrefix sets the output tag for the logger.
func (l *Logger) SetPrefix(tag string) {
	l.Lock()
	defer l.Unlock()
	l.tag = tag
}

// Cheap integer to fixed-width decimal ASCII. Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, width int) {
	// Assemble decimal in reverse order.
	var b [32]byte
	bp := 31 // len(b) - 1
	for q := i / 10; q > 0 || width > 1; q /= 10 {
		width--
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

// Output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Logger.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) Output(calldepth int, s string) error {
	return l.output(calldepth, l.DefaultLogLevel, s)
}

func (l *Logger) output(calldepth int, p Priority, s string) error {
	t := time.Now() // get this early.
	var file string
	var line int

	l.Lock()
	defer l.Unlock()

	if l.flag&(Lshortfile|Llongfile) != 0 {
		// release lock while getting caller info - it's expensive.
		l.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.Lock()
	}
	l.buf = l.buf[:0]
	l.buf = append(l.buf, l.tag...)
	if l.flag&LUTC != 0 {
		t = t.UTC()
	}
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(&l.buf, year, 4)
			l.buf = append(l.buf, '/')
			itoa(&l.buf, int(month), 2)
			l.buf = append(l.buf, '/')
			itoa(&l.buf, day, 2)
			l.buf = append(l.buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(&l.buf, hour, 2)
			l.buf = append(l.buf, ':')
			itoa(&l.buf, min, 2)
			l.buf = append(l.buf, ':')
			itoa(&l.buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				l.buf = append(l.buf, '.')
				itoa(&l.buf, t.Nanosecond()/1e3, 6)
			}
			l.buf = append(l.buf, ' ')
		}
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		l.buf = append(l.buf, file...)
		l.buf = append(l.buf, ':')
		itoa(&l.buf, line, -1)
		l.buf = append(l.buf, ": "...)
	}
	if l.flag&(Llevel) != 0 {
		lvl := fmt.Sprintf("%7.7s ", levelNames[p])
		l.buf = append(l.buf, lvl...)
	}

	l.buf = append(l.buf, s...)
	if len(s) == 0 || s[len(s)-1] != '\n' {
		l.buf = append(l.buf, '\n')
	}
	_, err := l.out.Write(l.buf)
	return err
}

func (l *Logger) write(p Priority, s string) error {
	if l.level >= p {
		switch l.logType {
		case tdefault:
			fallthrough
		case tfile:
			l.output(2, p, s)
		case tsyslog:
			_, err := l.syslogWriteAndRetry(p, s)
			return err
		}
	}
	return nil
}

// Print calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Print.
func (l *Logger) Print(v ...interface{}) {
	l.write(l.DefaultLogLevel, fmt.Sprint(v...))
}

// Printf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Printf(format string, v ...interface{}) {
	l.write(l.DefaultLogLevel, fmt.Sprintf(format, v...))
}

// Println calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Println.
func (l *Logger) Println(v ...interface{}) {
	l.write(l.DefaultLogLevel, fmt.Sprintln(v...))
}

// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).
func (l *Logger) Fatal(v ...interface{}) {
	l.write(l.FatalLogLevel, fmt.Sprint(v...))
	os.Exit(1)
}

// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).
func (l *Logger) Fatalf(format string, v ...interface{}) {
	l.write(l.FatalLogLevel, fmt.Sprintf(format, v...))
	os.Exit(1)
}

// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).
func (l *Logger) Fatalln(v ...interface{}) {
	l.write(l.FatalLogLevel, fmt.Sprintln(v...))
	os.Exit(1)
}

// Panic is equivalent to l.Print() followed by a call to panic().
func (l *Logger) Panic(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.write(l.PanicLogLevel, s)
	panic(s)
}

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (l *Logger) Panicf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.write(l.PanicLogLevel, s)
	panic(s)
}

// Panicln is equivalent to l.Println() followed by a call to panic().
func (l *Logger) Panicln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	l.write(l.PanicLogLevel, s)
	panic(s)
}

// Emerg logs a message with severity LOG_EMERG
func (l *Logger) Emerg(v ...interface{}) error {
	return l.write(LOG_EMERG, fmt.Sprint(v...))
}

// Emergf logs a message with severity LOG_EMERG
func (l *Logger) Emergf(format string, v ...interface{}) error {
	return l.write(LOG_EMERG, fmt.Sprintf(format, v...))
}

// Emergln logs a message with severity LOG_EMERG
func (l *Logger) Emergln(v ...interface{}) error {
	return l.write(LOG_EMERG, fmt.Sprintln(v...))
}

// Alert logs a message with severity LOG_ALERT
func (l *Logger) Alert(v ...interface{}) error {
	return l.write(LOG_ALERT, fmt.Sprint(v...))
}

// Alertf logs a message with severity LOG_ALERT
func (l *Logger) Alertf(format string, v ...interface{}) error {
	return l.write(LOG_ALERT, fmt.Sprintf(format, v...))
}

// Alertln logs a message with severity LOG_ALERT
func (l *Logger) Alertln(v ...interface{}) error {
	return l.write(LOG_ALERT, fmt.Sprintln(v...))
}

// Crit logs a message with severity LOG_CRIT
func (l *Logger) Crit(v ...interface{}) error {
	return l.write(LOG_CRIT, fmt.Sprint(v...))
}

// Critf logs a message with severity LOG_CRIT
func (l *Logger) Critf(format string, v ...interface{}) error {
	return l.write(LOG_CRIT, fmt.Sprintf(format, v...))
}

// Critln logs a message with severity LOG_CRIT
func (l *Logger) Critln(v ...interface{}) error {
	return l.write(LOG_CRIT, fmt.Sprintln(v...))
}

// Err logs a message with severity LOG_ERR
func (l *Logger) Err(v ...interface{}) error {
	return l.write(LOG_ERR, fmt.Sprint(v...))
}

// Errf logs a message with severity LOG_ERR
func (l *Logger) Errf(format string, v ...interface{}) error {
	return l.write(LOG_ERR, fmt.Sprintf(format, v...))
}

// Errln logs a message with severity LOG_ERR
func (l *Logger) Errln(v ...interface{}) error {
	return l.write(LOG_ERR, fmt.Sprintln(v...))
}

// Warning logs a message with severity LOG_WARNING
func (l *Logger) Warning(v ...interface{}) error {
	return l.write(LOG_WARNING, fmt.Sprint(v...))
}

// Warningf logs a message with severity LOG_WARNING
func (l *Logger) Warningf(format string, v ...interface{}) error {
	return l.write(LOG_WARNING, fmt.Sprintf(format, v...))
}

// Warningln logs a message with severity LOG_WARNING
func (l *Logger) Warningln(v ...interface{}) error {
	return l.write(LOG_WARNING, fmt.Sprintln(v...))
}

// Notice logs a message with severity LOG_NOTICE
func (l *Logger) Notice(v ...interface{}) error {
	return l.write(LOG_NOTICE, fmt.Sprint(v...))
}

// Noticef logs a message with severity LOG_NOTICE
func (l *Logger) Noticef(format string, v ...interface{}) error {
	return l.write(LOG_NOTICE, fmt.Sprintf(format, v...))
}

// Noticeln logs a message with severity LOG_NOTICE
func (l *Logger) Noticeln(v ...interface{}) error {
	return l.write(LOG_NOTICE, fmt.Sprintln(v...))
}

// Info logs a message with severity LOG_INFO
func (l *Logger) Info(v ...interface{}) error {
	return l.write(LOG_INFO, fmt.Sprint(v...))
}

// Infof logs a message with severity LOG_INFO
func (l *Logger) Infof(format string, v ...interface{}) error {
	return l.write(LOG_INFO, fmt.Sprintf(format, v...))
}

// Infoln logs a message with severity LOG_INFO
func (l *Logger) Infoln(v ...interface{}) error {
	return l.write(LOG_INFO, fmt.Sprintln(v...))
}

// Debug logs a message with severity LOG_DEBUG
func (l *Logger) Debug(v ...interface{}) error {
	return l.write(LOG_DEBUG, fmt.Sprint(v...))
}

// Debugf logs a message with severity LOG_DEBUG
func (l *Logger) Debugf(format string, v ...interface{}) error {
	return l.write(LOG_DEBUG, fmt.Sprintf(format, v...))
}

// Debugln logs a message with severity LOG_DEBUG
func (l *Logger) Debugln(v ...interface{}) error {
	return l.write(LOG_DEBUG, fmt.Sprintln(v...))
}

// Write implements the write interface, but currently cheats on the returned length.
func (l *Logger) Write(b []byte) (int, error) {
	return len(b), l.write(l.DefaultLogLevel, string(b))
}
